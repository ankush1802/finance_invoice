@model KF.Web.Models.UploadStatementParent

@using (Ajax.BeginForm("GetUserListforUploadingStatementForAccountant", "Accounting", new AjaxOptions { UpdateTargetId = "GetFriendlyNameDiv", LoadingElementId = "loading" }))
{
    var userdata = KF.Web.Models.UserData.GetCurrentUserData();
    <div id="loading" style="margin: 0px; padding: 0px; position: fixed; right: 0px;
                top: 0px; width: 100%; height: 100%; background-color: #666666; z-index: 30001;
                opacity: .8; filter: alpha(opacity=70);display:none">
        <p style="position: absolute; top: 30%; left: 45%; color: White;">
            Loading, please wait...
            <img src="~/ThemeAssets/Images/ajax-loading.gif" />
        </p>
    </div>
    <div class="col-sm-4">
        <div class="form-group">
            <label for="exampleInputEmail1">Select Bank</label>
            @Html.DropDownListFor(x => x.selectedBankId, Model.BankList, "Select Bank", new { @class = "form-control" })
            <label style="color:red" id="lblerrorSelectBank"></label>
        </div>
    </div>

    <div class="col-sm-4">
        <div id="StatementTypeHtml" class="form-group">
            <label for="exampleInputEmail1">Statement Type</label>
            <select class="form-control" data-val="true" data-val-number="The field selectedBankId must be a number." data-val-required="The Statement Type field is required." id="selectedStatementType" name="selectedStatementType">
                <option value="">Select Statement</option>
                <option value="1">Bank Statement</option>
                <option value="2">Credit Card</option>
            </select>
            <label style="color:red" id="lblerrorSelectStatement"></label>
        </div>
    </div>


    if (userdata.RoleId == 1)
    {
        <div class="col-sm-4" style="display:none">
            <div class="form-group">
                <label for="exampleInputEmail1">Select User</label>
                @Html.DropDownListFor(x => x.selectedUserId, Model.UserList, "Select User", new { @class = "form-control" })
                <label style="color:red" id="lblerror"></label>
            </div>
        </div>
    }
    else
    {
        <input type="hidden" id="selectedUserId" name="selectedUserId" value="@userdata.Id">
    }
    @Html.HiddenFor(a => a.IsExisting)
    if (Model.IsExisting == true)
    {
        <div class="col-sm-4">
            <button id="GetAccountNames" class="btn btn-primary" value="Get Account Names">Get Account Names</button>
        </div>
    }
    else
    {

        <div class="col-sm-4">
            <div class="form-group">
                <label for="exampleInputEmail1">Friendly Account Name</label>
              @Html.TextBoxFor(x => x.FriendlyAccountName, new { @class = "form-control" })
                <label style="color:red" id="lblFriendlyAccountNamerror"></label>
            </div>
        </div>
        if (userdata.RoleId == 1)
        {
            <p class="text-info">Note: You have not uploaded any statement for the selected user. Please enter an account name above before uploading a statement</p>
        }
        else
        {
            <p class="text-info">Note: You have not uploaded any statement. Please enter an account name below before uploading a statement</p>
        }

    }




}



