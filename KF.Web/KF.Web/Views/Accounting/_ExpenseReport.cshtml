@model IEnumerable<KF.Dto.Modules.FinanceReport.CategoryReportDto>

@{
    decimal TotalCostofGoodsSoldG = 0;
    decimal TotalPayrollExpenseG = 0;
    decimal TotalGeneralAdminExpenseG = 0;
    decimal TotalExpense = 0;
    decimal NetPurchasesG = 0;
    decimal TotalExpenseZ = 0;
}

<style>
    .expense-table {
        width: 100%;
    }

        .expense-table tr td:first-child {
            width: 60%;
        }

        .expense-table tr td:nth-child(2),
        .expense-table tr td:nth-child(3) {
            text-align: right;
            width: 20%;
        }

    .sTypeBottomBorder {
        border-bottom: 1px #333 solid;
    }
</style>
<div class="col-lg-12">
    @{
        <h3 class="H">EXPENSE</h3>
        if (Model.Count() > 0)
        {
            if (Model.Where(a => a.ClassificationChartAccountNumber > 50010000 && a.ClassificationChartAccountNumber <= 50019999).Any())
            {
                <h4> Cost of Goods Sold</h4>
                var saleRevenueList = Model.Where(a => a.ClassificationChartAccountNumber > 50010000 && a.ClassificationChartAccountNumber <= 50019999).OrderBy(d => d.ClassificationChartAccountNumber).ToList();
                <table class="expense-table">
                    @foreach (var data in saleRevenueList)
                    {
                        TotalCostofGoodsSoldG = Decimal.Add(TotalCostofGoodsSoldG, data.GrossTotal);
                        <tr class="@data.ClassificationType">
                            <td>@data.ClassificationName</td>
                            @if (data.ClassificationType == "T" || data.ClassificationType == "G" || data.ClassificationType == "S")
                            {
                                if (Math.Abs(data.GrossTotal) > 0)
                                {
                                    <td></td>
                                    <td class="debitExpense currencyFormat">@decimal.Round(data.GrossTotal, 2, @MidpointRounding.AwayFromZero)</td>
                                }
                                else
                                {
                                    <td></td>
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                    @{TotalExpense = Decimal.Add(TotalExpense, TotalCostofGoodsSoldG);}
                    <tr class="T">
                        <td><strong>Total Cost of Goods Sold</strong> </td>
                        <td>&nbsp;&nbsp;</td>
                        <td class="topBorder currencyFormat sTypeBottomBorder">@TotalCostofGoodsSoldG</td>
                    </tr>
                </table>
            }

             <!--Dynamic Range Start-->
            if (Model.Where(a => a.ClassificationChartAccountNumber > 50019999 && a.ClassificationChartAccountNumber < 54000000).Any())
            {

                var DynamicExpenseList = Model.Where(a => a.ClassificationChartAccountNumber > 50019999 && a.ClassificationChartAccountNumber < 54000000).OrderBy(d => d.ClassificationChartAccountNumber).GroupBy(f => f.ReportingTotalNumber).ToList();
                foreach (var dynamicRow in DynamicExpenseList)
                {
                    decimal DynamicTotal = 0;
                    <table class="expense-table">

                        @{
                    var dynamicClassificationList = dynamicRow.ToList();
                    foreach (var row in dynamicClassificationList)
                    {
                        DynamicTotal = Decimal.Add(DynamicTotal, row.GrossTotal);
                        <tr class="@row.ClassificationType">
                            <td>@row.ClassificationName</td>
                            @if (row.ClassificationType == "G")
                            {
                                if (Math.Abs(row.GrossTotal) > 0)
                                {

                                    <td></td>
                                    <td class="debitExpense currencyFormat">@decimal.Round(row.GrossTotal, 2, @MidpointRounding.AwayFromZero)</td>
                                }
                                else
                                {
                                    <td></td>
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                        }

                        @{TotalExpense = Decimal.Add(TotalExpense, DynamicTotal); }

                        <tr class="T">
                            <td><strong>@Model.Where(f => f.ReportingTotalNumber == dynamicRow.Key).Select(s => s.ReportingTotalClassification).FirstOrDefault()</strong> </td>
                            <td>&nbsp;&nbsp;</td>
                            <td class="topBorder currencyFormat sTypeBottomBorder">@DynamicTotal</td>
                        </tr>
                    </table>
                }


            }
            <!--Dynamic Range End-->
            <!--Payroll expenses-->

            if (Model.Where(a => a.ClassificationChartAccountNumber > 54000000 && a.ClassificationChartAccountNumber < 54009999).Any())
            {
                <h4 class="H"> Payroll Expenses</h4>
                var saleRevenueList = Model.Where(a => a.ClassificationChartAccountNumber > 54000000 && a.ClassificationChartAccountNumber < 54009999).OrderBy(d => d.ClassificationChartAccountNumber).ToList();
                <table class="expense-table">
                    @foreach (var data in saleRevenueList)
                    {
                        TotalPayrollExpenseG = Decimal.Add(TotalPayrollExpenseG, data.GrossTotal);
                        <tr class="@data.ClassificationType">
                            <td>@data.ClassificationName</td>
                            @if (data.ClassificationType == "G")
                            {
                                if (Math.Abs(data.GrossTotal) > 0)
                                {
                                    <td></td>
                                    <td class="debitExpense currencyFormat">@decimal.Round(data.GrossTotal, 2, @MidpointRounding.AwayFromZero)</td>
                                }
                                else
                                {
                                    <td></td>
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                    @{TotalExpense = Decimal.Add(TotalExpense, TotalPayrollExpenseG);}


                    <tr class="T">
                        <td><strong>Total Payroll Expense</strong> </td>
                        <td>&nbsp;&nbsp;</td>
                        <td class="topBorder currencyFormat sTypeBottomBorder">@TotalPayrollExpenseG</td>
                    </tr>

                </table>

            }

             <!--Dynamic Range Start-->
            if (Model.Where(a => a.ClassificationChartAccountNumber > 54009999 && a.ClassificationChartAccountNumber < 60000000).Any())
            {

                var DynamicExpenseList = Model.Where(a => a.ClassificationChartAccountNumber > 54009999 && a.ClassificationChartAccountNumber < 60000000).OrderBy(d => d.ClassificationChartAccountNumber).GroupBy(f => f.ReportingTotalNumber).ToList();
                foreach (var dynamicRow in DynamicExpenseList)
                {
                    decimal DynamicTotal = 0;
                    <table class="expense-table">

                        @{
                    var dynamicClassificationList = dynamicRow.ToList();
                    foreach (var row in dynamicClassificationList)
                    {
                        DynamicTotal = Decimal.Add(DynamicTotal, row.GrossTotal);
                        <tr class="@row.ClassificationType">
                            <td>@row.ClassificationName</td>
                            @if (row.ClassificationType == "G")
                            {
                                if (Math.Abs(row.GrossTotal) > 0)
                                {

                                    <td></td>
                                    <td class="debitExpense currencyFormat">@decimal.Round(row.GrossTotal, 2, @MidpointRounding.AwayFromZero)</td>
                                }
                                else
                                {
                                    <td></td>
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                        }

                        @{TotalExpense = Decimal.Add(TotalExpense, DynamicTotal); }

                        <tr class="T">
                            <td><strong>@Model.Where(f => f.ReportingTotalNumber == dynamicRow.Key).Select(s => s.ReportingTotalClassification).FirstOrDefault()</strong> </td>
                            <td>&nbsp;&nbsp;</td>
                            <td class="topBorder currencyFormat sTypeBottomBorder">@DynamicTotal</td>
                        </tr>
                    </table>
                }


            }
            <!--Dynamic Range End-->

            <!--General & Admin Expenses-->
            // if (Model.Where(a => a.ClassificationChartAccountNumber > 5600 && a.ClassificationChartAccountNumber < 5999).Any())

            if (Model.Where(a => a.ClassificationChartAccountNumber > 60000000 && a.ClassificationChartAccountNumber < 60009999).Any())
            {
                <h4> General & Administrative Expenses</h4>
                var saleRevenueList = Model.Where(a => a.ClassificationChartAccountNumber > 60000000 && a.ClassificationChartAccountNumber < 60009999).OrderBy(d => d.ClassificationChartAccountNumber).ToList();
                <table class="expense-table">
                    @foreach (var data in saleRevenueList)
                    {
                        TotalGeneralAdminExpenseG = Decimal.Add(TotalGeneralAdminExpenseG, data.GrossTotal);
                        <tr class="@data.ClassificationType">
                            <td>@data.ClassificationName</td>
                            @if (data.ClassificationType == "G")
                            {
                                if (Math.Abs(data.GrossTotal) > 0)
                                {
                                    <td></td>
                                    <td class="debitExpense currencyFormat">@decimal.Round(data.GrossTotal, 2, @MidpointRounding.AwayFromZero)</td>
                                }
                                else
                                {
                                    <td></td>
                                    <td></td>
                                }
                            }
                        </tr>
                    }

                    @{TotalExpense = Decimal.Add(TotalExpense, TotalGeneralAdminExpenseG);}
                    <tr>
                        <td><strong>Total General & Admin. Expenses</strong> </td>
                        <td>&nbsp;&nbsp;</td>
                        <td class="topBorder currencyFormat sTypeBottomBorder">@TotalGeneralAdminExpenseG</td>
                    </tr>
                </table>
            }
            <br />

          <!--Dynamic Range Start-->
            if (Model.Where(a => a.ClassificationChartAccountNumber > 60009999 && a.ClassificationChartAccountNumber < 99990000).Any())
            {

                var DynamicExpenseList = Model.Where(a => a.ClassificationChartAccountNumber > 60009999 && a.ClassificationChartAccountNumber < 99990000).OrderBy(d => d.ClassificationChartAccountNumber).GroupBy(f => f.ReportingTotalNumber).ToList();
                foreach (var dynamicRow in DynamicExpenseList)
                {
                    decimal DynamicTotal = 0;
                    <table class="expense-table">

                        @{
                    var dynamicClassificationList = dynamicRow.ToList();
                    foreach (var row in dynamicClassificationList)
                    {
                        DynamicTotal = Decimal.Add(DynamicTotal, row.GrossTotal);
                        <tr class="@row.ClassificationType">
                            <td>@row.ClassificationName</td>
                            @if (row.ClassificationType == "G")
                            {
                                if (Math.Abs(row.GrossTotal) > 0)
                                {

                                    <td></td>
                                    <td class="debitExpense currencyFormat">@decimal.Round(row.GrossTotal, 2, @MidpointRounding.AwayFromZero)</td>
                                }
                                else
                                {
                                    <td></td>
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                        }

                        @{TotalExpense = Decimal.Add(TotalExpense, DynamicTotal); }

                        <tr class="T">
                            <td><strong>@Model.Where(f => f.ReportingTotalNumber == dynamicRow.Key).Select(s => s.ReportingTotalClassification).FirstOrDefault()</strong> </td>
                            <td>&nbsp;&nbsp;</td>
                            <td class="topBorder currencyFormat sTypeBottomBorder">@DynamicTotal</td>
                        </tr>
                    </table>
                }


            }
            <!--Dynamic Range End-->


            TotalExpenseZ = TotalCostofGoodsSoldG + TotalPayrollExpenseG + TotalGeneralAdminExpenseG + NetPurchasesG;

            <table class="expense-table">
                <tr class="Z">
                    <td><strong>TOTAL EXPENSE</strong></td>
                    <td>&nbsp;</td>
                    <td class="topBorder currencyFormat sTypeBottomBorder" style="border-bottom:1px solid #333"><strong>@TotalExpense</strong></td>
                </tr>
            </table>

        }
        else
        {
            <p>No records</p>
        }
    }
</div>